#!/usr/bin/env python3
"""
Enhanced App Runner with Multi-language Support
–ó–∞–ø—É—Å–∫ app_enhanced.py —Å SPOT –∏ FUTURES —Ä—ã–Ω–∫–∞–º–∏
"""

import subprocess
import sys
import time
import requests
from pathlib import Path
import os

# Set up language for console output
# You can change this to "en" for English or "ru" for Russian
CONSOLE_LANGUAGE = os.getenv('CONSOLE_LANGUAGE', 'ru')  # Default to Russian for backwards compatibility

# Import translation system
try:
    from translations import get_text
except ImportError:
    # Fallback if translations module is not available
    def get_text(key, lang="en"):
        translations = {
            "en": {
                "secrets_file_not_found": "‚ùå File .streamlit/secrets.toml not found!",
                "app_file_not_found": "‚ùå File app_enhanced.py not found!",
                "launching_app": "üöÄ Launching app_enhanced.py with SPOT and FUTURES markets...",
                "waiting_for_startup": "‚è≥ Waiting for application startup...",
                "app_started_successfully": "‚úÖ Application started successfully!",
                "attempt": "‚è≥ Attempt",
                "creating_public_tunnel": "üåê Creating public tunnel...",
                "ngrok_not_found": "‚ùå ngrok not found!",
                "stopping_processes": "üõë Stopping processes...",
                "streamlit_stopped": "‚úÖ Streamlit stopped",
                "ngrok_stopped": "‚úÖ ngrok stopped",
                "app_launch_title": "üöÄ LAUNCHING app_enhanced.py",
                "functionality": "üìä Functionality:",
                "spot_markets": "   ‚Ä¢ SPOT markets",
                "futures_markets": "   ‚Ä¢ FUTURES markets",
                "ai_predictions": "   ‚Ä¢ AI predictions",
                "technical_analysis": "   ‚Ä¢ Technical analysis",
                "failed_to_start": "‚ùå Failed to start application",
                "app_running": "‚úÖ APPLICATION RUNNING!",
                "public_url": "üåê Public URL:",
                "local_url": "üì± Local URL: http://localhost:8501",
                "check_url": "Check http://localhost:4040",
                "available_features": "üéØ Available in the app:",
                "spot_trading": "   üìà SPOT - regular trading",
                "futures_trading": "   üöÄ FUTURES - futures",
                "ai_forecasts": "   ü§ñ AI forecasts (1h, 4h, 8h, 24h)",
                "languages": "   üåç Russian/English",
                "share_link": "üí° Share the link for access!",
                "stop_instruction": "üõë Ctrl+C to stop",
                "stopping": "‚èπÔ∏è  Stopping...",
                "error_message": "‚ùå Error:",
            },
            "ru": {
                "secrets_file_not_found": "‚ùå –§–∞–π–ª .streamlit/secrets.toml –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                "app_file_not_found": "‚ùå –§–∞–π–ª app_enhanced.py –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                "launching_app": "üöÄ –ó–∞–ø—É—Å–∫–∞—é app_enhanced.py —Å SPOT –∏ FUTURES —Ä—ã–Ω–∫–∞–º–∏...",
                "waiting_for_startup": "‚è≥ –û–∂–∏–¥–∞—é –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...",
                "app_started_successfully": "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
                "attempt": "‚è≥ –ü–æ–ø—ã—Ç–∫–∞",
                "creating_public_tunnel": "üåê –°–æ–∑–¥–∞—é –ø—É–±–ª–∏—á–Ω—ã–π —Ç—É–Ω–Ω–µ–ª—å...",
                "ngrok_not_found": "‚ùå ngrok –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                "stopping_processes": "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã...",
                "streamlit_stopped": "‚úÖ Streamlit –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "ngrok_stopped": "‚úÖ ngrok –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "app_launch_title": "üöÄ –ó–ê–ü–£–°–ö app_enhanced.py",
                "functionality": "üìä –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:",
                "spot_markets": "   ‚Ä¢ SPOT —Ä—ã–Ω–∫–∏",
                "futures_markets": "   ‚Ä¢ FUTURES —Ä—ã–Ω–∫–∏",
                "ai_predictions": "   ‚Ä¢ AI –ø—Ä–æ–≥–Ω–æ–∑—ã",
                "technical_analysis": "   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                "failed_to_start": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "app_running": "‚úÖ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û!",
                "public_url": "üåê –ü—É–±–ª–∏—á–Ω—ã–π URL:",
                "local_url": "üì± –õ–æ–∫–∞–ª—å–Ω—ã–π URL: http://localhost:8501",
                "check_url": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ http://localhost:4040",
                "available_features": "üéØ –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ:",
                "spot_trading": "   üìà SPOT - –æ–±—ã—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è",
                "futures_trading": "   üöÄ FUTURES - —Ñ—å—é—á–µ—Ä—Å—ã",
                "ai_forecasts": "   ü§ñ AI –ø—Ä–æ–≥–Ω–æ–∑—ã (1—á, 4—á, 8—á, 24—á)",
                "languages": "   üåç –†—É—Å—Å–∫–∏–π/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
                "share_link": "üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞!",
                "stop_instruction": "üõë Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
                "stopping": "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞...",
                "error_message": "‚ùå –û—à–∏–±–∫–∞:",
            }
        }
        return translations.get(lang, {}).get(key, key)

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ / Configuration check"""
    secrets_file = Path(".streamlit/secrets.toml")
    if not secrets_file.exists():
        print(get_text("secrets_file_not_found", CONSOLE_LANGUAGE))
        return False
    
    if not Path("app_enhanced.py").exists():
        print(get_text("app_file_not_found", CONSOLE_LANGUAGE))
        return False
    
    return True

def start_streamlit():
    """–ó–∞–ø—É—Å–∫ app_enhanced.py / Start app_enhanced.py"""
    print(get_text("launching_app", CONSOLE_LANGUAGE))
    
    process = subprocess.Popen([
        sys.executable, "-m", "streamlit", "run", "app_enhanced.py",
        "--server.port=8501",
        "--server.address=0.0.0.0",
        "--server.headless=true",
        "--browser.gatherUsageStats=false"
    ])
    
    return process

def wait_for_streamlit():
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ / Wait for startup"""
    print(get_text("waiting_for_startup", CONSOLE_LANGUAGE))
    for i in range(30):
        try:
            response = requests.get("http://localhost:8501/_stcore/health", timeout=2)
            if response.status_code == 200:
                print(get_text("app_started_successfully", CONSOLE_LANGUAGE))
                return True
        except:
            time.sleep(1)
            if i % 5 == 0:
                print(f"{get_text('attempt', CONSOLE_LANGUAGE)} {i+1}/30...")
    
    return False

def start_ngrok():
    """–ó–∞–ø—É—Å–∫ ngrok / Start ngrok"""
    print(get_text("creating_public_tunnel", CONSOLE_LANGUAGE))
    
    try:
        subprocess.run(["ngrok", "version"], capture_output=True, check=True)
    except:
        print(get_text("ngrok_not_found", CONSOLE_LANGUAGE))
        return None
    
    process = subprocess.Popen([
        "ngrok", "http", "8501", "--log=stdout"
    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    
    time.sleep(3)
    try:
        response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
        if response.status_code == 200:
            tunnels = response.json()
            if tunnels["tunnels"]:
                public_url = tunnels["tunnels"][0]["public_url"]
                return process, public_url
    except:
        pass
    
    return process, None

def cleanup(streamlit_process, ngrok_process):
    """–û—á–∏—Å—Ç–∫–∞ / Cleanup"""
    print(f"\n{get_text('stopping_processes', CONSOLE_LANGUAGE)}")
    
    if streamlit_process:
        streamlit_process.terminate()
        streamlit_process.wait()
        print(get_text("streamlit_stopped", CONSOLE_LANGUAGE))
    
    if ngrok_process:
        ngrok_process.terminate() 
        ngrok_process.wait()
        print(get_text("ngrok_stopped", CONSOLE_LANGUAGE))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è / Main function"""
    print(get_text("app_launch_title", CONSOLE_LANGUAGE))
    print("=" * 40)
    print(get_text("functionality", CONSOLE_LANGUAGE))
    print(get_text("spot_markets", CONSOLE_LANGUAGE))
    print(get_text("futures_markets", CONSOLE_LANGUAGE))
    print(get_text("ai_predictions", CONSOLE_LANGUAGE))
    print(get_text("technical_analysis", CONSOLE_LANGUAGE))
    print("=" * 40)
    
    if not check_config():
        return 1
    
    streamlit_process = None
    ngrok_process = None
    
    try:
        streamlit_process = start_streamlit()
        
        if not wait_for_streamlit():
            print(get_text("failed_to_start", CONSOLE_LANGUAGE))
            return 1
        
        result = start_ngrok()
        if result:
            ngrok_process, public_url = result
        
        print("\n" + "=" * 40)
        print(get_text("app_running", CONSOLE_LANGUAGE))
        print("=" * 40)
        print(f"{get_text('public_url', CONSOLE_LANGUAGE)} {public_url or get_text('check_url', CONSOLE_LANGUAGE)}")
        print(get_text("local_url", CONSOLE_LANGUAGE))
        
        print(f"\n{get_text('available_features', CONSOLE_LANGUAGE)}")
        print(get_text("spot_trading", CONSOLE_LANGUAGE))
        print(get_text("futures_trading", CONSOLE_LANGUAGE))
        print(get_text("ai_forecasts", CONSOLE_LANGUAGE))
        print(get_text("languages", CONSOLE_LANGUAGE))
        
        print(f"\n{get_text('share_link', CONSOLE_LANGUAGE)}")
        print(get_text("stop_instruction", CONSOLE_LANGUAGE))
        print("=" * 40)
        
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print(f"\n{get_text('stopping', CONSOLE_LANGUAGE)}")
    except Exception as e:
        print(f"{get_text('error_message', CONSOLE_LANGUAGE)} {e}")
    finally:
        cleanup(streamlit_process, ngrok_process)
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 